{"/home/travis/build/npmtest/node-npmtest-redis-sentinel/test.js":"/* istanbul instrument in package npmtest_redis_sentinel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redis-sentinel/lib.npmtest_redis_sentinel.js":"/* istanbul instrument in package npmtest_redis_sentinel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_redis_sentinel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_redis_sentinel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-redis-sentinel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-redis-sentinel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_redis_sentinel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_redis_sentinel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_redis_sentinel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_redis_sentinel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_redis_sentinel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_redis_sentinel.__dirname + '/lib.npmtest_redis_sentinel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redis-sentinel/node_modules/redis-sentinel/index.js":"var redis = require('redis'),\n    net = require('net'),\n    when = require('when');\n\nfunction Sentinel(endpoints) {\n\n    // Instantiate if needed\n    if (!(this instanceof Sentinel)) {\n        return new Sentinel(endpoints);\n    }\n\n    this.endpoints = endpoints;\n    this.clients = [];\n    this.pubsub = [];\n}\n\n/**\n * Create a client\n * @param  {String} masterName the name of the master. Defaults to mymaster\n * @param  {Object} opts       standard redis client options (optional)\n * @return {RedisClient}       the RedisClient for the desired endpoint\n */\nSentinel.prototype.createClient = function(masterName, opts) {\n    // When the client is ready create another client and subscribe to the\n    // switch-master event. Then any time there is a message on the channel it\n    // must be a master change, so reconnect all clients. This avoids combining\n    // the pub/sub client with the normal client and interfering with whatever\n    // the user is trying to do.\n    if (this.pubsub.length == 0) {\n        var self = this;\n        var pubsubOpts = {};\n        pubsubOpts.role = \"sentinel\";\n        pubsubClient = this.createClientInternal(masterName, pubsubOpts);\n        pubsubClient.subscribe(\"+switch-master\", function(error) {\n            if (error) {\n                console.error(\"Unable to subscribe to Sentinel PUBSUB\");\n            }\n        });\n        pubsubClient.on(\"message\", function(channel, message) {\n            console.warn(\"Received +switch-master message from Redis Sentinel.\",\n                         \" Reconnecting clients.\");\n            self.reconnectAllClients();\n        });\n        pubsubClient.on(\"error\", function(error) {});\n        self.pubsub.push(pubsubClient);\n    }\n    return this.createClientInternal(masterName, opts);\n}\n\nSentinel.prototype.createClientInternal = function(masterName, opts) {\n    if (typeof masterName !== 'string') {\n        opts = masterName;\n        masterName = 'mymaster';\n    }\n\n    opts = opts || {};\n    var role = opts.role || 'master';\n\n    var endpoints = this.endpoints;\n\n\n    var netClient = new net.Socket();\n    var client = new redis.RedisClient(netClient, opts);\n    this.clients.push(client);\n\n    var self = this;\n\n    client.on('end', function() {\n        // if we're purposefully ending, forget us\n        if (this.closing) {\n            var index = self.clients.indexOf(this);\n            if (index !== -1) {\n                self.clients.splice(index, 1);\n            }\n        }\n    });\n\n    function connectClient(resolver) {\n        return function(err, host, port) {\n            if (err) {\n                return client.emit('error', err);\n            }\n\n            var connectionOption = {\n                port: port,\n                host: host\n            };\n            client.connectionOption = connectionOption;\n            client.stream.connect(connectionOption.port, connectionOption.host);\n\n            // Hijack the emit method so that we can get in there and\n            // do any reconnection on errors, before raising it up the\n            // stack...\n            var oldEmit = client.emit;\n            client.emit = function(eventName) {\n\n                // Has an error been hit?\n                if (eventName === 'error') {\n                    hitError.apply(null, arguments);\n                } else {\n                    // Not an error - call the real emit...\n                    oldEmit.apply(client, arguments);\n                }\n            };\n\n            client.on('reconnecting', refreshEndpoints);\n\n            function refreshEndpoints() {\n                client.connectionOption.port = \"\";\n                client.connectionOption.host = \"\";\n                resolver(self.endpoints, masterName, function(_err, ip, port) {\n                    if (_err) {\n                        oldEmit.call(client, 'error', _err);\n                    } else {\n                        // Try reconnecting - remove the old stream first.\n                        client.stream.end();\n                        \n                        client.connectionOption.port = port;\n                        client.connectionOption.host = ip;\n                        client.connection_gone(\"sentinel induced refresh\");\n                    }\n                });\n            }\n\n            // Crude but may do for now. On error re-resolve the master\n            // and retry the connection\n            function hitError(eventName, err) {\n\n                var _args = arguments;\n                function reemit() {\n                    oldEmit.apply(client, _args);\n                }\n\n                // If we are still connected then reraise the error - thats\n                // not what we are here to handle\n                if (client.connected) { return reemit(); }\n\n                // In the background the client is going to keep trying to reconnect\n                // and this error will keep getting raised - lets just keep trying\n                // to get a new master...\n                refreshEndpoints();\n            }\n        };\n    }\n\n    switch(role){\n        case 'sentinel':\n            resolveSentinelClient(endpoints, masterName, connectClient(resolveSentinelClient));\n            break;\n\n        case 'master':\n            resolveMasterClient(endpoints, masterName, connectClient(resolveMasterClient));\n            break;\n\n        case 'slave':\n            resolveSlaveClient(endpoints, masterName, connectClient(resolveSlaveClient));\n    }\n\n    return client;\n};\n\n\n/*\n * Ensure that all clients are trying to reconnect.\n */\nSentinel.prototype.reconnectAllClients = function() {\n    // clients in 'closing' state were purposefully closed, and won't ever\n    // reconnect; remove those from our clients before proceeding\n    this.clients = this.clients.filter(function(client) { return !client.closing; });\n\n    this.clients.forEach(function(client) {\n        // It is safe to call this multiple times in quick succession, as\n        // might happen with multiple Sentinel instances. Each client\n        // records its reconnect state and will only try to reconnect if \n        // not already doing so.\n        client.connection_gone(\"sentinel switch-master\");\n    });\n};\n\nfunction resolveClient() {\n    var _i, __slice = [].slice;\n\n    // The following just splits the arguments into the first argument (endpoints),\n    // the last argument (callback) and then any arguments in the middle (args).\n    var endpoints = arguments[0];\n    var checkEndpointFn = arguments[1];\n    var args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []);\n    var callback = arguments[_i++];\n\n    /**\n     * We use the algorithm from http://redis.io/topics/sentinel-clients\n     * to get a sentinel client and then do 'stuff' with it\n     */\n    var promise = when.resolve();\n\n    // Because finding the master is going to be an async list we will terminate\n    // when we find one then use promises...\n    promise = endpoints.reduce(function(soFar, endpoint) {\n        return soFar.then(function() {\n            var deferred = when.defer();\n\n            // Farily illegible way of passing (endpoint, arg1, arg2, ..., callback)\n            // to checkEndpointFn\n            checkEndpointFn.apply(null, [endpoint].concat(args, [function() {\n                var err = arguments[0];\n                if (err) {\n                    deferred.resolve();\n                } else {\n                    // This is the endpoint that has responded so stick it on the top of\n                    // the list\n                    var index = endpoints.indexOf(endpoint);\n                    endpoints.splice(index, 1);\n                    endpoints.unshift(endpoint);\n\n                    // Callback with whatever other arguments we've been given\n                    var _args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n                    callback.apply(null, [null].concat(_args));\n                }\n            }]));\n            return deferred.promise;\n        });\n    }, promise);\n\n    promise = promise.then(function() {\n        // If we've got this far then we've failed to find whatever we are looking for from any\n        // of the sentinels. Callback with an error.\n        callback(new Error('Failed to find a sentinel from the endpoints'));\n    });\n\n    // Catch the failure (if there is one)\n    promise.catch(function(err) { callback(err); });\n}\n\nfunction isSentinelOk(endpoint, callback) {\n    var client = redis.createClient(endpoint.port, endpoint.host);\n    var callbackSent = false;\n    client.on(\"error\", function(err) {\n        if (!callbackSent) {\n            callbackSent = true;\n            callback(err);\n        }\n        client.end();\n    });\n\n    // Send a command just to check we can...\n    client.info(function(err, resp) {\n        if (callbackSent) { return; }\n        callbackSent = true;\n        if (err) { return callback(err); }\n        callback(null, endpoint.host, String(endpoint.port));\n    });\n    client.quit();\n}\n\nfunction getMasterFromEndpoint(endpoint, masterName, callback) {\n    var sentinelClient = redis.createClient(endpoint.port, endpoint.host);\n    var callbackSent = false;\n\n    // If there is an error then callback with it\n    sentinelClient.on(\"error\", function(err) {\n        if (!callbackSent) {\n            callbackSent = true;\n            callback(err);\n        }\n        sentinelClient.end();\n    });\n\n    sentinelClient.send_command('SENTINEL', ['get-master-addr-by-name', masterName], function(err, result) {\n        if (callbackSent) { return; }\n        callbackSent = true;\n\n        if (err) { return callback(err); }\n\n        // Test the response\n        if (result === null) {\n            callback(new Error(\"Unknown master name: \" + masterName));\n        } else {\n            var ip = result[0];\n            var port = result[1];\n            callback(null, ip, port);\n        }\n    });\n    sentinelClient.quit();\n}\n\nfunction getSlaveFromEndpoint(endpoint, masterName, callback) {\n    var sentinelClient = redis.createClient(endpoint.port, endpoint.host);\n    var callbackSent = false;\n\n    // If there is an error then callback with it\n    sentinelClient.on(\"error\", function(err) {\n        if (!callbackSent) {\n            callbackSent = true;\n            callback(err);\n        }\n        sentinelClient.end();\n    });\n\n    sentinelClient.send_command('SENTINEL', ['slaves', masterName], function(err, result) {\n        if (callbackSent) { return; }\n        callbackSent = true;\n\n        if (err) { return callback(err); }\n\n        // Test the response\n        if (result === null) {\n            callback(new Error(\"Unknown master name: \" + masterName));\n        } else if(result.length === 0){\n            callback(new Error(\"No slaves linked to the master.\"));\n        } else {\n            var slaveInfoArr = result[Math.floor(Math.random() * result.length)]; //range 0 to result.length -1\n            if((slaveInfoArr.length % 2) > 0){\n                callback(new Error(\"Corrupted response from the sentinel\"));\n            } else {\n              var slaveInfo = parseSentinelResponse(slaveInfoArr);\n              callback(null, slaveInfo.ip, slaveInfo.port);\n            }\n        }\n    });\n    sentinelClient.quit();\n}\n\nfunction resolveSentinelClient(endpoints, masterName, callback) {\n    resolveClient(endpoints, isSentinelOk, callback);\n}\n\nfunction resolveMasterClient(endpoints, masterName, callback) {\n    resolveClient(endpoints, getMasterFromEndpoint, masterName, callback);\n}\n\nfunction resolveSlaveClient(endpoints, masterName, callback) {\n    resolveClient(endpoints, getSlaveFromEndpoint, masterName, callback);\n}\n\nfunction parseSentinelResponse(resArr){\n    var response = {};\n    for(var i = 0 ; i < resArr.length ; i+=2){\n        response[resArr[i]] = resArr[i+1];\n    }\n    return response;\n}\n\n// Shortcut for quickly getting a client from endpoints\nfunction createClient(endpoints, masterName, options) {\n    var sentinel = Sentinel(endpoints);\n    return sentinel.createClient(masterName, options);\n}\n\nmodule.exports.Sentinel = Sentinel;\nmodule.exports.createClient = createClient;\nmodule.exports.redis = redis;\n"}